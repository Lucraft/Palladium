plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    forge()
}

version = version + "-forge"

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runConfigs.configureEach {
        if (name == "client" || name == "data")
            runDir = "../run"
        else if (name == "server")
            runDir = "../run/server-forge"
    }

    forge {
        mixinConfig "palladium-common.mixins.json"
        mixinConfig "palladium.mixins.json"

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        dataGen {
            mod "palladium"
        }
    }

    launches {
        data {
            arg "--existing", project(":common").file("src/main/resources/").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modCompileOnly "mezz.jei:jei-${rootProject.jei_version}:api"
    modRuntimeOnly "mezz.jei:jei-${rootProject.jei_version}"

    // Configured & Catalogue
    modRuntimeOnly "curse.maven:configured-457570:${rootProject.configured_version}"
    modRuntimeOnly "curse.maven:catalogue-459701:${rootProject.catalogue_version}"

    // Curios
    modRuntimeOnly "top.theillusivec4.curios:curios-forge:${rootProject.curios_version}"
    modCompileOnly "top.theillusivec4.curios:curios-forge:${rootProject.curios_version}:api"

    // KubeJS
    modImplementation("dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}")

    // Pehkui
    modCompileOnly("com.github.Virtuoel:Pehkui:${rootProject.pehkui_forge_version}")

    // Smooth Boot
//    modRuntimeOnly "curse.maven:smoothboot-633412:${rootProject.smoothboot_forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.mod_version
    }
}

sourceSets.main.resources {
    exclude '**/data/palladium/**/fabric/*'
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    repositories {
        maven {
            url 'https://repo.repsy.io/mvn/lucraft/threetag'
            credentials {
                username System.getenv('REPSY_USERNAME')
                password System.getenv('REPSY_PASSWORD')
            }
        }
    }
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")