plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runConfigs.configureEach {
        if (name == "client") {
            runDir = "../run"

            if (System.getenv('MC_USERNAME') && System.getenv('MC_UUID') && System.getenv('MC_ACCESS_TOKEN')) {
                programArgs '--username', System.getenv('MC_USERNAME'), '--uuid', System.getenv('MC_UUID'), '--accessToken', System.getenv('MC_ACCESS_TOKEN')
            }
        } else if (name == "server") {
            runDir = "../run/server-neoforge"
        } else if (name == "data") {
            programArgs '--existing', project(":common").file("src/main/resources/").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "net.threetag:palladiumcore-forge:${rootProject.palladiumcore_version}"
    include "net.threetag:palladiumcore-forge:${rootProject.palladiumcore_version}"

    // Player Animator
    include modImplementation("dev.kosmx.player-anim:player-animation-lib-forge:${rootProject.player_anim_version}")

    // GeckoLib
    modImplementation("software.bernie.geckolib:geckolib-neoforge-1.21:${rootProject.geckolib_version}")

    // JEI
    modCompileOnly "mezz.jei:jei-${rootProject.minecraft_version}-forge-api:${rootProject.jei_version}"

    // REI
    modImplementation "me.shedaniel:RoughlyEnoughItems-neoforge:${rootProject.rei_version}"

    // Curios
    modLocalRuntime "top.theillusivec4.curios:curios-forge:${rootProject.curios_version}"
    modCompileOnly "top.theillusivec4.curios:curios-forge:${rootProject.curios_version}:api"

    // KubeJS
    modImplementation "dev.latvian.mods:kubejs-neoforge:${rootProject.kubejs_version}"

    // Pehkui
    modCompileOnly "com.github.Virtuoel:Pehkui:${rootProject.pehkui_forge_version}"

    // Condensed Creative
    modCompileOnly "io.wispforest:condensed_creative-forge:${rootProject.condensed_creative_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
    inputs.property "META-INF/neoforge.mods.toml", project.version
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
        maven {
            url 'https://maven.threetag.net'
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}