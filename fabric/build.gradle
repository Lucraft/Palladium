plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

version = version + "-fabric"

loom {
    runConfigs.configureEach {
        if (name == "client")
            runDir = "../run"
        else if (name == "server")
            runDir = "../run/server-fabric"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    // Cardinal Components
    modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components_version}"
    modApi "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components_version}"

    // Mod Menu
    modApi "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    // REI
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"

    // Cloth Config
    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // Trinkets
    modImplementation ("dev.emi:trinkets:${rootProject.trinkets_version}") {
        exclude(group: "dev.onyxstudios.cardinal-components-api")
    }

    // Energy & TechReborn
    include modApi("teamreborn:energy:${rootProject.energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.mod_version
    }
}

sourceSets.main.resources {
    srcDir project(":forge").file("src/generated/resources").absolutePath
    exclude '**/data/palladium/**/forge/*'
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
        // Add repositories to publish to here.
    }
}
