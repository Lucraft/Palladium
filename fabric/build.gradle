plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runConfigs.configureEach {
        if (name == "client") {
            runDir = "../run"

            if (System.getenv('MC_USERNAME') && System.getenv('MC_UUID') && System.getenv('MC_ACCESS_TOKEN')) {
                programArgs '--username', System.getenv('MC_USERNAME'), '--uuid', System.getenv('MC_UUID'), '--accessToken', System.getenv('MC_ACCESS_TOKEN')
            }
        } else if (name == "server")
            runDir = "../run/server-fabric"
    }

    mixin {
        defaultRefmapName = "palladium-fabric-refmap.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "net.threetag:PalladiumCore-fabric:${rootProject.palladiumcore_version}"
    include "net.threetag:PalladiumCore-fabric:${rootProject.palladiumcore_version}"

    // QuiltSL
    modCompileOnly "org.quiltmc:qsl:${rootProject.qsl_version}"

    // Player Animator
    include modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${rootProject.player_anim_version}")

    // GeckoLib
    modImplementation("software.bernie.geckolib:geckolib-fabric-1.20.1:${rootProject.geckolib_version}")

    // Forge Config API Port
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${rootProject.forge_config_api_port_version}"
    include "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${rootProject.forge_config_api_port_version}"

    // PortingLib Stuff
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
    implementation(include("io.github.llamalad7:mixinextras-fabric:0.2.0"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:attributes:${rootProject.portinglib_version}", {
        exclude group: "com.github.llamalad7.mixinextras"
    }))

    // Cardinal Components
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_components_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${rootProject.cardinal_components_version}"

    // Mod Menu
    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    // JEI
    modCompileOnly "mezz.jei:jei-${rootProject.minecraft_version}-fabric-api:${rootProject.jei_version}"
    modLocalRuntime "mezz.jei:jei-${rootProject.minecraft_version}-fabric:${rootProject.jei_version}"

    // REI
//    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"

    // Trinkets
    modImplementation ("dev.emi:trinkets:${rootProject.trinkets_version}") {
        exclude(group: "dev.onyxstudios.cardinal-components-api")
    }

    // Energy & TechReborn
    include modApi("teamreborn:energy:${rootProject.energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // KubeJS
    modImplementation "dev.latvian.mods:kubejs-fabric:${rootProject.kubejs_version}"

    // Pehkui
    modCompileOnly("com.github.Virtuoel:Pehkui:${rootProject.pehkui_fabric_version}", {
        exclude group: "net.fabricmc.fabric-api"
    })

    // Condensed Creative
    modCompileOnly "io.wispforest:condensed_creative-fabric:${rootProject.condensed_creative_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

configurations.all {
    resolutionStrategy {
        force "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    }
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.mod_version
    }
}

sourceSets.main.resources {
    srcDir project(":forge").file("src/generated/resources").absolutePath
    exclude '**/data/palladium/**/forge/*'
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {
        maven {
            url 'https://maven.threetag.net'
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}
